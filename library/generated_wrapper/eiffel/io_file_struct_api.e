note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class IO_FILE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	flags: INTEGER
			-- Access member `_flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `_flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

	io_read_ptr:  detachable STRING
			-- Access member `_IO_read_ptr`
		require
			exists: exists
		do
			if attached c_io_read_ptr (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_read_ptr (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_read_ptr (a_value: STRING) 
			-- Change the value of member `_IO_read_ptr` to `a_value`.
		require
			exists: exists
		do
			set_c_io_read_ptr (item, (create {C_STRING}.make (a_value)).item )
		end

	io_read_end:  detachable STRING
			-- Access member `_IO_read_end`
		require
			exists: exists
		do
			if attached c_io_read_end (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_read_end (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_read_end (a_value: STRING) 
			-- Change the value of member `_IO_read_end` to `a_value`.
		require
			exists: exists
		do
			set_c_io_read_end (item, (create {C_STRING}.make (a_value)).item )
		end

	io_read_base:  detachable STRING
			-- Access member `_IO_read_base`
		require
			exists: exists
		do
			if attached c_io_read_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_read_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_read_base (a_value: STRING) 
			-- Change the value of member `_IO_read_base` to `a_value`.
		require
			exists: exists
		do
			set_c_io_read_base (item, (create {C_STRING}.make (a_value)).item )
		end

	io_write_base:  detachable STRING
			-- Access member `_IO_write_base`
		require
			exists: exists
		do
			if attached c_io_write_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_write_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_write_base (a_value: STRING) 
			-- Change the value of member `_IO_write_base` to `a_value`.
		require
			exists: exists
		do
			set_c_io_write_base (item, (create {C_STRING}.make (a_value)).item )
		end

	io_write_ptr:  detachable STRING
			-- Access member `_IO_write_ptr`
		require
			exists: exists
		do
			if attached c_io_write_ptr (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_write_ptr (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_write_ptr (a_value: STRING) 
			-- Change the value of member `_IO_write_ptr` to `a_value`.
		require
			exists: exists
		do
			set_c_io_write_ptr (item, (create {C_STRING}.make (a_value)).item )
		end

	io_write_end:  detachable STRING
			-- Access member `_IO_write_end`
		require
			exists: exists
		do
			if attached c_io_write_end (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_write_end (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_write_end (a_value: STRING) 
			-- Change the value of member `_IO_write_end` to `a_value`.
		require
			exists: exists
		do
			set_c_io_write_end (item, (create {C_STRING}.make (a_value)).item )
		end

	io_buf_base:  detachable STRING
			-- Access member `_IO_buf_base`
		require
			exists: exists
		do
			if attached c_io_buf_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_buf_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_buf_base (a_value: STRING) 
			-- Change the value of member `_IO_buf_base` to `a_value`.
		require
			exists: exists
		do
			set_c_io_buf_base (item, (create {C_STRING}.make (a_value)).item )
		end

	io_buf_end:  detachable STRING
			-- Access member `_IO_buf_end`
		require
			exists: exists
		do
			if attached c_io_buf_end (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_buf_end (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_buf_end (a_value: STRING) 
			-- Change the value of member `_IO_buf_end` to `a_value`.
		require
			exists: exists
		do
			set_c_io_buf_end (item, (create {C_STRING}.make (a_value)).item )
		end

	io_save_base:  detachable STRING
			-- Access member `_IO_save_base`
		require
			exists: exists
		do
			if attached c_io_save_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_save_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_save_base (a_value: STRING) 
			-- Change the value of member `_IO_save_base` to `a_value`.
		require
			exists: exists
		do
			set_c_io_save_base (item, (create {C_STRING}.make (a_value)).item )
		end

	io_backup_base:  detachable STRING
			-- Access member `_IO_backup_base`
		require
			exists: exists
		do
			if attached c_io_backup_base (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_backup_base (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_backup_base (a_value: STRING) 
			-- Change the value of member `_IO_backup_base` to `a_value`.
		require
			exists: exists
		do
			set_c_io_backup_base (item, (create {C_STRING}.make (a_value)).item )
		end

	io_save_end:  detachable STRING
			-- Access member `_IO_save_end`
		require
			exists: exists
		do
			if attached c_io_save_end (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_io_save_end (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_io_save_end (a_value: STRING) 
			-- Change the value of member `_IO_save_end` to `a_value`.
		require
			exists: exists
		do
			set_c_io_save_end (item, (create {C_STRING}.make (a_value)).item )
		end

	markers: detachable IO_MARKER_STRUCT_API 
			-- Access member `_markers`
		require
			exists: exists
		do
			if attached c_markers (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_markers (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_markers (item) 
		end

	set_markers (a_value: IO_MARKER_STRUCT_API) 
			-- Set member `_markers`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_markers (item, a_value.item)
		ensure
			markers_set: attached markers as l_value implies l_value.item = a_value.item
		end

	chain: detachable IO_FILE_STRUCT_API 
			-- Access member `_chain`
		require
			exists: exists
		do
			if attached c_chain (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_chain (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_chain (item) 
		end

	set_chain (a_value: IO_FILE_STRUCT_API) 
			-- Set member `_chain`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_chain (item, a_value.item)
		ensure
			chain_set: attached chain as l_value implies l_value.item = a_value.item
		end

	fileno: INTEGER
			-- Access member `_fileno`
		require
			exists: exists
		do
			Result := c_fileno (item)
		ensure
			result_correct: Result = c_fileno (item)
		end

	set_fileno (a_value: INTEGER) 
			-- Change the value of member `_fileno` to `a_value`.
		require
			exists: exists
		do
			set_c_fileno (item, a_value)
		ensure
			fileno_set: a_value = fileno
		end

	flags2: INTEGER
			-- Access member `_flags2`
		require
			exists: exists
		do
			Result := c_flags2 (item)
		ensure
			result_correct: Result = c_flags2 (item)
		end

	set_flags2 (a_value: INTEGER) 
			-- Change the value of member `_flags2` to `a_value`.
		require
			exists: exists
		do
			set_c_flags2 (item, a_value)
		ensure
			flags2_set: a_value = flags2
		end

	old_offset: INTEGER
			-- Access member `_old_offset`
		require
			exists: exists
		do
			Result := c_old_offset (item)
		ensure
			result_correct: Result = c_old_offset (item)
		end

	set_old_offset (a_value: INTEGER) 
			-- Change the value of member `_old_offset` to `a_value`.
		require
			exists: exists
		do
			set_c_old_offset (item, a_value)
		ensure
			old_offset_set: a_value = old_offset
		end

	cur_column: INTEGER
			-- Access member `_cur_column`
		require
			exists: exists
		do
			Result := c_cur_column (item)
		ensure
			result_correct: Result = c_cur_column (item)
		end

	set_cur_column (a_value: INTEGER) 
			-- Change the value of member `_cur_column` to `a_value`.
		require
			exists: exists
		do
			set_c_cur_column (item, a_value)
		ensure
			cur_column_set: a_value = cur_column
		end

	vtable_offset: INTEGER
			-- Access member `_vtable_offset`
		require
			exists: exists
		do
			Result := c_vtable_offset (item)
		ensure
			result_correct: Result = c_vtable_offset (item)
		end

	set_vtable_offset (a_value: INTEGER) 
			-- Change the value of member `_vtable_offset` to `a_value`.
		require
			exists: exists
		do
			set_c_vtable_offset (item, a_value)
		ensure
			vtable_offset_set: a_value = vtable_offset
		end

	shortbuf: POINTER
			-- Access member `_shortbuf`
		require
			exists: exists
		do
			Result := c_shortbuf (item)
		ensure
			result_correct: Result = c_shortbuf (item)
		end

	lock: POINTER
			-- Access member `_lock`
		require
			exists: exists
		do
			Result := c_lock (item)
		ensure
			result_correct: Result = c_lock (item)
		end

	set_lock (a_value: POINTER) 
			-- Change the value of member `_lock` to `a_value`.
		require
			exists: exists
		do
			set_c_lock (item, a_value)
		ensure
			lock_set: a_value = lock
		end

	offset: INTEGER
			-- Access member `_offset`
		require
			exists: exists
		do
			Result := c_offset (item)
		ensure
			result_correct: Result = c_offset (item)
		end

	set_offset (a_value: INTEGER) 
			-- Change the value of member `_offset` to `a_value`.
		require
			exists: exists
		do
			set_c_offset (item, a_value)
		ensure
			offset_set: a_value = offset
		end

	codecvt: detachable IO_CODECVT_STRUCT_API 
			-- Access member `_codecvt`
		require
			exists: exists
		do
			if attached c_codecvt (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_codecvt (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_codecvt (item) 
		end

	set_codecvt (a_value: IO_CODECVT_STRUCT_API) 
			-- Set member `_codecvt`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_codecvt (item, a_value.item)
		ensure
			codecvt_set: attached codecvt as l_value implies l_value.item = a_value.item
		end

	wide_data: detachable IO_WIDE_DATA_STRUCT_API 
			-- Access member `_wide_data`
		require
			exists: exists
		do
			if attached c_wide_data (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_wide_data (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_wide_data (item) 
		end

	set_wide_data (a_value: IO_WIDE_DATA_STRUCT_API) 
			-- Set member `_wide_data`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_wide_data (item, a_value.item)
		ensure
			wide_data_set: attached wide_data as l_value implies l_value.item = a_value.item
		end

	freeres_list: detachable IO_FILE_STRUCT_API 
			-- Access member `_freeres_list`
		require
			exists: exists
		do
			if attached c_freeres_list (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_freeres_list (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_freeres_list (item) 
		end

	set_freeres_list (a_value: IO_FILE_STRUCT_API) 
			-- Set member `_freeres_list`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_freeres_list (item, a_value.item)
		ensure
			freeres_list_set: attached freeres_list as l_value implies l_value.item = a_value.item
		end

	freeres_buf: POINTER
			-- Access member `_freeres_buf`
		require
			exists: exists
		do
			Result := c_freeres_buf (item)
		ensure
			result_correct: Result = c_freeres_buf (item)
		end

	set_freeres_buf (a_value: POINTER) 
			-- Change the value of member `_freeres_buf` to `a_value`.
		require
			exists: exists
		do
			set_c_freeres_buf (item, a_value)
		ensure
			freeres_buf_set: a_value = freeres_buf
		end

	pad5: INTEGER
			-- Access member `__pad5`
		require
			exists: exists
		do
			Result := c_pad5 (item)
		ensure
			result_correct: Result = c_pad5 (item)
		end

	set_pad5 (a_value: INTEGER) 
			-- Change the value of member `__pad5` to `a_value`.
		require
			exists: exists
		do
			set_c_pad5 (item, a_value)
		ensure
			pad5_set: a_value = pad5
		end

	mode: INTEGER
			-- Access member `_mode`
		require
			exists: exists
		do
			Result := c_mode (item)
		ensure
			result_correct: Result = c_mode (item)
		end

	set_mode (a_value: INTEGER) 
			-- Change the value of member `_mode` to `a_value`.
		require
			exists: exists
		do
			set_c_mode (item, a_value)
		ensure
			mode_set: a_value = mode
		end

	unused2: POINTER
			-- Access member `_unused2`
		require
			exists: exists
		do
			Result := c_unused2 (item)
		ensure
			result_correct: Result = c_unused2 (item)
		end

feature {NONE} -- Implementation wrapper for struct struct _IO_FILE

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct _IO_FILE)"
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_flags =  (int)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_io_read_ptr (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_ptr
			]"
		end

	set_c_io_read_ptr (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_ptr =  (char*)$a_value
			]"
		ensure
			io_read_ptr_set: a_value = c_io_read_ptr (an_item)
		end

	c_io_read_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_end
			]"
		end

	set_c_io_read_end (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_end =  (char*)$a_value
			]"
		ensure
			io_read_end_set: a_value = c_io_read_end (an_item)
		end

	c_io_read_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_base
			]"
		end

	set_c_io_read_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_read_base =  (char*)$a_value
			]"
		ensure
			io_read_base_set: a_value = c_io_read_base (an_item)
		end

	c_io_write_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_base
			]"
		end

	set_c_io_write_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_base =  (char*)$a_value
			]"
		ensure
			io_write_base_set: a_value = c_io_write_base (an_item)
		end

	c_io_write_ptr (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_ptr
			]"
		end

	set_c_io_write_ptr (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_ptr =  (char*)$a_value
			]"
		ensure
			io_write_ptr_set: a_value = c_io_write_ptr (an_item)
		end

	c_io_write_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_end
			]"
		end

	set_c_io_write_end (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_write_end =  (char*)$a_value
			]"
		ensure
			io_write_end_set: a_value = c_io_write_end (an_item)
		end

	c_io_buf_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_buf_base
			]"
		end

	set_c_io_buf_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_buf_base =  (char*)$a_value
			]"
		ensure
			io_buf_base_set: a_value = c_io_buf_base (an_item)
		end

	c_io_buf_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_buf_end
			]"
		end

	set_c_io_buf_end (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_buf_end =  (char*)$a_value
			]"
		ensure
			io_buf_end_set: a_value = c_io_buf_end (an_item)
		end

	c_io_save_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_save_base
			]"
		end

	set_c_io_save_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_save_base =  (char*)$a_value
			]"
		ensure
			io_save_base_set: a_value = c_io_save_base (an_item)
		end

	c_io_backup_base (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_backup_base
			]"
		end

	set_c_io_backup_base (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_backup_base =  (char*)$a_value
			]"
		ensure
			io_backup_base_set: a_value = c_io_backup_base (an_item)
		end

	c_io_save_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_save_end
			]"
		end

	set_c_io_save_end (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_IO_save_end =  (char*)$a_value
			]"
		ensure
			io_save_end_set: a_value = c_io_save_end (an_item)
		end

	c_markers (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_markers
			]"
		end

	set_c_markers (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_markers =  (struct _IO_marker*)$a_value
			]"
		ensure
			markers_set: a_value = c_markers (an_item)
		end

	c_chain (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_chain
			]"
		end

	set_c_chain (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_chain =  (struct _IO_FILE*)$a_value
			]"
		ensure
			chain_set: a_value = c_chain (an_item)
		end

	c_fileno (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_fileno
			]"
		end

	set_c_fileno (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_fileno =  (int)$a_value
			]"
		ensure
			fileno_set: a_value = c_fileno (an_item)
		end

	c_flags2 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_flags2
			]"
		end

	set_c_flags2 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_flags2 =  (int)$a_value
			]"
		ensure
			flags2_set: a_value = c_flags2 (an_item)
		end

	c_old_offset (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_old_offset
			]"
		end

	set_c_old_offset (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_old_offset =  (__off_t)$a_value
			]"
		ensure
			old_offset_set: a_value = c_old_offset (an_item)
		end

	c_cur_column (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_cur_column
			]"
		end

	set_c_cur_column (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_cur_column =  (unsigned short)$a_value
			]"
		ensure
			cur_column_set: a_value = c_cur_column (an_item)
		end

	c_vtable_offset (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_vtable_offset
			]"
		end

	set_c_vtable_offset (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_vtable_offset =  (signed char)$a_value
			]"
		ensure
			vtable_offset_set: a_value = c_vtable_offset (an_item)
		end

	c_shortbuf (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_shortbuf
			]"
		end

	c_lock (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_lock
			]"
		end

	set_c_lock (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_lock =  (_IO_lock_t*)$a_value
			]"
		ensure
			lock_set: a_value = c_lock (an_item)
		end

	c_offset (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_offset
			]"
		end

	set_c_offset (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_offset =  (__off64_t)$a_value
			]"
		ensure
			offset_set: a_value = c_offset (an_item)
		end

	c_codecvt (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_codecvt
			]"
		end

	set_c_codecvt (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_codecvt =  (struct _IO_codecvt*)$a_value
			]"
		ensure
			codecvt_set: a_value = c_codecvt (an_item)
		end

	c_wide_data (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_wide_data
			]"
		end

	set_c_wide_data (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_wide_data =  (struct _IO_wide_data*)$a_value
			]"
		ensure
			wide_data_set: a_value = c_wide_data (an_item)
		end

	c_freeres_list (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_freeres_list
			]"
		end

	set_c_freeres_list (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_freeres_list =  (struct _IO_FILE*)$a_value
			]"
		ensure
			freeres_list_set: a_value = c_freeres_list (an_item)
		end

	c_freeres_buf (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_freeres_buf
			]"
		end

	set_c_freeres_buf (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_freeres_buf =  (void*)$a_value
			]"
		ensure
			freeres_buf_set: a_value = c_freeres_buf (an_item)
		end

	c_pad5 (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->__pad5
			]"
		end

	set_c_pad5 (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->__pad5 =  (size_t)$a_value
			]"
		ensure
			pad5_set: a_value = c_pad5 (an_item)
		end

	c_mode (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_mode
			]"
		end

	set_c_mode (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_mode =  (int)$a_value
			]"
		ensure
			mode_set: a_value = c_mode (an_item)
		end

	c_unused2 (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct _IO_FILE*)$an_item)->_unused2
			]"
		end

end
