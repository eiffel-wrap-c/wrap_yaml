note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_EVENT_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	start_mark: POINTER
			-- Access member `start_mark`
		require
			exists: exists
		do
			Result := c_start_mark (item) 
		ensure
		end

	set_start_mark (a_value: POINTER )
			-- Set member `start_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_start_mark (item, a_value)
		ensure
			start_mark_set: start_mark = a_value 		end

	end_mark: POINTER
			-- Access member `end_mark`
		require
			exists: exists
		do
			Result := c_end_mark (item) 
		ensure
		end

	set_end_mark (a_value: POINTER )
			-- Set member `end_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_end_mark (item, a_value)
		ensure
			end_mark_set: end_mark = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct yaml_event_s

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_event_s)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->type =  (yaml_event_type_t)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_start_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_event_s*)$an_item)->start_mark
			]"
		end

	set_c_start_mark (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->start_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_end_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_event_s*)$an_item)->end_mark
			]"
		end

	set_c_end_mark (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->end_mark =  *(yaml_mark_t*)$a_value
			]"
		end

end
