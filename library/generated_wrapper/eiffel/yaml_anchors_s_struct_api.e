note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_ANCHORS_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	references: INTEGER
			-- Access member `references`
		require
			exists: exists
		do
			Result := c_references (item)
		ensure
			result_correct: Result = c_references (item)
		end

	set_references (a_value: INTEGER) 
			-- Change the value of member `references` to `a_value`.
		require
			exists: exists
		do
			set_c_references (item, a_value)
		ensure
			references_set: a_value = references
		end

	anchor: INTEGER
			-- Access member `anchor`
		require
			exists: exists
		do
			Result := c_anchor (item)
		ensure
			result_correct: Result = c_anchor (item)
		end

	set_anchor (a_value: INTEGER) 
			-- Change the value of member `anchor` to `a_value`.
		require
			exists: exists
		do
			set_c_anchor (item, a_value)
		ensure
			anchor_set: a_value = anchor
		end

	serialized: INTEGER
			-- Access member `serialized`
		require
			exists: exists
		do
			Result := c_serialized (item)
		ensure
			result_correct: Result = c_serialized (item)
		end

	set_serialized (a_value: INTEGER) 
			-- Change the value of member `serialized` to `a_value`.
		require
			exists: exists
		do
			set_c_serialized (item, a_value)
		ensure
			serialized_set: a_value = serialized
		end

feature {NONE} -- Implementation wrapper for struct struct yaml_anchors_s

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_anchors_s)"
		end

	c_references (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->references
			]"
		end

	set_c_references (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->references =  (int)$a_value
			]"
		ensure
			references_set: a_value = c_references (an_item)
		end

	c_anchor (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->anchor
			]"
		end

	set_c_anchor (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->anchor =  (int)$a_value
			]"
		ensure
			anchor_set: a_value = c_anchor (an_item)
		end

	c_serialized (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->serialized
			]"
		end

	set_c_serialized (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_anchors_s*)$an_item)->serialized =  (int)$a_value
			]"
		ensure
			serialized_set: a_value = c_serialized (an_item)
		end

end
