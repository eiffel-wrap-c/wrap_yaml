note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_MARK_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	index: INTEGER
			-- Access member `index`
		require
			exists: exists
		do
			Result := c_index (item)
		ensure
			result_correct: Result = c_index (item)
		end

	set_index (a_value: INTEGER) 
			-- Change the value of member `index` to `a_value`.
		require
			exists: exists
		do
			set_c_index (item, a_value)
		ensure
			index_set: a_value = index
		end

	line: INTEGER
			-- Access member `line`
		require
			exists: exists
		do
			Result := c_line (item)
		ensure
			result_correct: Result = c_line (item)
		end

	set_line (a_value: INTEGER) 
			-- Change the value of member `line` to `a_value`.
		require
			exists: exists
		do
			set_c_line (item, a_value)
		ensure
			line_set: a_value = line
		end

	column: INTEGER
			-- Access member `column`
		require
			exists: exists
		do
			Result := c_column (item)
		ensure
			result_correct: Result = c_column (item)
		end

	set_column (a_value: INTEGER) 
			-- Change the value of member `column` to `a_value`.
		require
			exists: exists
		do
			set_c_column (item, a_value)
		ensure
			column_set: a_value = column
		end

feature {NONE} -- Implementation wrapper for struct struct yaml_mark_s

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_mark_s)"
		end

	c_index (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->index
			]"
		end

	set_c_index (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->index =  (size_t)$a_value
			]"
		ensure
			index_set: a_value = c_index (an_item)
		end

	c_line (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->line
			]"
		end

	set_c_line (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->line =  (size_t)$a_value
			]"
		ensure
			line_set: a_value = c_line (an_item)
		end

	c_column (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->column
			]"
		end

	set_c_column (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_mark_s*)$an_item)->column =  (size_t)$a_value
			]"
		ensure
			column_set: a_value = c_column (an_item)
		end

end
