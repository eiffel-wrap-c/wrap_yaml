note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_TAG_DIRECTIVE_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	handle:  detachable STRING
			-- Access member `handle`
		require
			exists: exists
		do
			if attached c_handle (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_handle (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_handle (a_value: STRING) 
			-- Change the value of member `handle` to `a_value`.
		require
			exists: exists
		do
			set_c_handle (item, (create {C_STRING}.make (a_value)).item )
		end

	a_prefix:  detachable STRING
			-- Access member `prefix`
		require
			exists: exists
		do
			if attached c_a_prefix (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_a_prefix (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_a_prefix (a_value: STRING) 
			-- Change the value of member `prefix` to `a_value`.
		require
			exists: exists
		do
			set_c_a_prefix (item, (create {C_STRING}.make (a_value)).item )
		end

feature {NONE} -- Implementation wrapper for struct struct yaml_tag_directive_s

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_tag_directive_s)"
		end

	c_handle (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_tag_directive_s*)$an_item)->handle
			]"
		end

	set_c_handle (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_tag_directive_s*)$an_item)->handle =  (yaml_char_t*)$a_value
			]"
		ensure
			handle_set: a_value = c_handle (an_item)
		end

	c_a_prefix (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_tag_directive_s*)$an_item)->prefix
			]"
		end

	set_c_a_prefix (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_tag_directive_s*)$an_item)->prefix =  (yaml_char_t*)$a_value
			]"
		ensure
			a_prefix_set: a_value = c_a_prefix (an_item)
		end

end
