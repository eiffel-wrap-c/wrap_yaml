note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_ALIAS_DATA_S_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	anchor:  detachable STRING
			-- Access member `anchor`
		require
			exists: exists
		do
			if attached c_anchor (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_anchor (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_anchor (a_value: STRING) 
			-- Change the value of member `anchor` to `a_value`.
		require
			exists: exists
		do
			set_c_anchor (item, (create {C_STRING}.make (a_value)).item )
		end

	index: INTEGER
			-- Access member `index`
		require
			exists: exists
		do
			Result := c_index (item)
		ensure
			result_correct: Result = c_index (item)
		end

	set_index (a_value: INTEGER) 
			-- Change the value of member `index` to `a_value`.
		require
			exists: exists
		do
			set_c_index (item, a_value)
		ensure
			index_set: a_value = index
		end

	mark: POINTER
			-- Access member `mark`
		require
			exists: exists
		do
			Result := c_mark (item) 
		ensure
		end

	set_mark (a_value: POINTER )
			-- Set member `mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_mark (item, a_value)
		ensure
			mark_set: mark = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct yaml_alias_data_s

	sizeof_external: INTEGER 
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_alias_data_s)"
		end

	c_anchor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_alias_data_s*)$an_item)->anchor
			]"
		end

	set_c_anchor (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_alias_data_s*)$an_item)->anchor =  (yaml_char_t*)$a_value
			]"
		ensure
			anchor_set: a_value = c_anchor (an_item)
		end

	c_index (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_alias_data_s*)$an_item)->index
			]"
		end

	set_c_index (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_alias_data_s*)$an_item)->index =  (int)$a_value
			]"
		ensure
			index_set: a_value = c_index (an_item)
		end

	c_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_alias_data_s*)$an_item)->mark
			]"
		end

	set_c_mark (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_alias_data_s*)$an_item)->mark =  *(yaml_mark_t*)$a_value
			]"
		end

end
