note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_TOKEN_S_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER)
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	start_mark: POINTER
			-- Access member `start_mark`
		require
			exists: exists
		do
			Result := c_start_mark (item)
		ensure
		end

	set_start_mark (a_value: POINTER )
			-- Set member `start_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_start_mark (item, a_value)
		ensure
			start_mark_set: start_mark = a_value
		end

	end_mark: POINTER
			-- Access member `end_mark`
		require
			exists: exists
		do
			Result := c_end_mark (item)
		ensure
		end

	set_end_mark (a_value: POINTER )
			-- Set member `end_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_end_mark (item, a_value)
		ensure
			end_mark_set: end_mark = a_value
		end

feature -- Token Data: Stream Start

	stream_start_encoding: INTEGER
			-- The stream encoding.
		do
			Result := c_stream_start_encoding (item)
		end

feature -- Token Data: Alias

	tag_handle: detachable STRING
			-- The tag handle.
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_handle (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	tag_suffix: detachable STRING
			-- The tag suffix.
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_suffix (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

feature -- Token Data: Scalar

	scalar_value: detachable STRING
			-- The scalar value
		local
			l_ptr: POINTER
		do
			l_ptr := c_scalar_value (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	scalar_length: INTEGER
			-- The scalar length.
		do
			Result := c_scalar_length (item)
		end

	scalar_style: INTEGER
			-- The scalar style.
		do
			Result := c_scalar_style (item)
		end

feature -- Token Data: Version directive

	version_directive_major: INTEGER
			-- The major version number.
		do
			Result := c_version_directive_major (item)
		end

	version_directive_minor: INTEGER
			-- The minor version number.
		local
			l_ptr: POINTER
		do
			Result := c_version_directive_minor (item)
		end

feature -- The tag directive

	tag_directive_handle: detachable STRING
			-- The tag handle.
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_directive_handle (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	tag_directive_prefix: detachable STRING
			-- The tag prefix.
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_directive_prefix (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

feature -- Token Data: Tag

	alias_value: detachable STRING
			-- The alias value
		local
			l_ptr: POINTER
		do
			l_ptr := c_alias_value (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

feature -- Token Data: Anchor

	anchor_value: detachable STRING
			-- The anchor value
		local
			l_ptr: POINTER
		do
			l_ptr := c_anchor_value (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

feature {NONE} -- Implementation wrapper for struct struct yaml_token_s

	sizeof_external: INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_token_s)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->type =  (yaml_token_type_t)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_start_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_token_s*)$an_item)->start_mark
			]"
		end

	set_c_start_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->start_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_end_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_token_s*)$an_item)->end_mark
			]"
		end

	set_c_end_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->end_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_stream_start_encoding (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.stream_start.encoding
			]"
		end

	c_alias_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.alias.value
			]"
		end

	c_anchor_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.anchor.value
			]"
		end

	c_tag_suffix (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.tag.suffix
			]"
		end

	c_tag_handle (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.tag.handle
			]"
		end

	c_scalar_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.scalar.value
			]"
		end


	c_scalar_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.scalar.length
			]"
		end


	c_scalar_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.scalar.style
			]"
		end

	c_version_directive_minor (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.version_directive.minor
			]"
		end

	c_version_directive_major (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.version_directive.major
			]"
		end

	c_tag_directive_handle (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.tag_directive.handle
			]"
		end

	c_tag_directive_prefix (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_token_s*)$an_item)->data.tag_directive.prefix
			]"
		end


end
