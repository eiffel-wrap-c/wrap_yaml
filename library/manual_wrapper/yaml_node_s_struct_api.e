note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_NODE_S_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER)
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	tag: detachable STRING
			-- Access member `tag`
		require
			exists: exists
		do
			if attached c_tag (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_tag (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_tag (a_value: STRING)
			-- Change the value of member `tag` to `a_value`.
		require
			exists: exists
		do
			set_c_tag (item, (create {C_STRING}.make (a_value)).item )
		end

	start_mark: YAML_MARK_S_STRUCT_API
			-- Access member `start_mark`
		require
			exists: exists
		do
			create Result.make_by_pointer (c_start_mark (item))
		end

	set_start_mark (a_value: POINTER )
			-- Set member `start_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_start_mark (item, a_value)
		ensure
			start_mark_set: start_mark.item = a_value
		end

	end_mark: YAML_MARK_S_STRUCT_API
			-- Access member `end_mark`
		require
			exists: exists
		do
			create Result.make_by_pointer (c_end_mark (item))
		end

	set_end_mark (a_value: POINTER )
			-- Set member `end_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_end_mark (item, a_value)
		ensure
			end_mark_set: end_mark.item = a_value
		end

feature -- Node Data

	scalar_style: INTEGER
			-- The scalar style.
		do
			Result := c_scalar_style (item)
		end

	scalar_length: INTEGER
			-- The scalar integer.
		do
			Result := c_scalar_length (item)
		end

	scalar_value: detachable STRING
			-- The scalar value.
		local
			l_ptr: POINTER
		do
			l_ptr := c_scalar_value (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	sequence_style: INTEGER
			-- The sequence style.
		do
			Result := c_sequence_style (item)
		end

	sequence_items_start: POINTER
			-- The start of the sequence items.
		do
			Result := c_sequence_items_start (item)
		end

	sequence_items_end: POINTER
			-- The end of the sequence items.
		do
			Result := c_sequence_items_end (item)
		end


	sequence_items_top: POINTER
			-- The top of the sequence items.
		do
			Result := c_sequence_items_top (item)
		end


	mapping_style: INTEGER
			-- The mapping style.
		do
			Result := c_mapping_style (item)
		end

	mapping_pairs_start: detachable YAML_NODE_PAIR_S_STRUCT_API
			-- The beginning of the start.
		local
			l_ptr: POINTER
		do
			l_ptr := c_mapping_pairs_start (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end

	mapping_pairs_end: detachable YAML_NODE_PAIR_S_STRUCT_API
			-- The end of the stack.
		local
			l_ptr: POINTER
		do
			l_ptr := c_mapping_pairs_end (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end

	mapping_pairs_top: detachable YAML_NODE_PAIR_S_STRUCT_API
			-- The top of the stack.
		local
			l_ptr: POINTER
		do
			l_ptr := c_mapping_pairs_top (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end


feature {NONE} -- Implementation wrapper for struct struct yaml_node_s

	sizeof_external: INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_node_s)"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->type =  (yaml_node_type_t)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_tag (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->tag
			]"
		end

	set_c_tag (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->tag =  (yaml_char_t*)$a_value
			]"
		ensure
			tag_set: a_value = c_tag (an_item)
		end

	c_start_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_node_s*)$an_item)->start_mark
			]"
		end

	set_c_start_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->start_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_end_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_node_s*)$an_item)->end_mark
			]"
		end

	set_c_end_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->end_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_scalar_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.scalar.value
			]"
		end

	c_scalar_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.scalar.length
			]"
		end

	c_scalar_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.scalar.style
			]"
		end

	c_sequence_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.sequence.style
			]"
		end

	c_sequence_items_top (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.sequence.items.top
			]"
		end

	c_sequence_items_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.sequence.items.end
			]"
		end

	c_sequence_items_start (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.sequence.items.start
			]"
		end

	c_mapping_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.mapping.style
			]"
		end

	c_mapping_pairs_top (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.mapping.pairs.top
			]"
		end

	c_mapping_pairs_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.mapping.pairs.end
			]"
		end

	c_mapping_pairs_start (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_node_s*)$an_item)->data.mapping.pairs.start
			]"
		end

end
