note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_EVENT_S_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER)
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	start_mark: POINTER
			-- Access member `start_mark`
		require
			exists: exists
		do
			Result := c_start_mark (item)
		ensure
		end

	set_start_mark (a_value: POINTER )
			-- Set member `start_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_start_mark (item, a_value)
		ensure
			start_mark_set: start_mark = a_value
		end

	end_mark: POINTER
			-- Access member `end_mark`
		require
			exists: exists
		do
			Result := c_end_mark (item)
		ensure
		end

	set_end_mark (a_value: POINTER )
			-- Set member `end_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_end_mark (item, a_value)
		ensure
			end_mark_set: end_mark = a_value
		end


feature -- Yaml Stream Parameter

	stream_start_encoding: INTEGER
			-- Stream parameter, document encoding.
		require
			is_stream_start_event: type = {YAML_EVENT_TYPE_E_ENUM_API}.yaml_stream_start_event
		do
			Result := c_stream_start_encoding (item)
		ensure
			valid_encoding: (create {YAML_ENCODING_E_ENUM_API}).is_valid_enum (Result)
		end

feature -- Yaml document parameters


	document_start_version_directive: detachable YAML_VERSION_DIRECTIVE_S_STRUCT_API
		local
			l_ptr: POINTER
		do
			l_ptr := c_document_start_version_directive (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end

	 document_start_tag_directives_start: detachable YAML_TAG_DIRECTIVE_S_STRUCT_API
	 	local
	 		l_ptr: POINTER
	 	do
			l_ptr := c_document_start_tag_directives_start (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
	 	end

	 document_start_tag_directives_end: detachable YAML_TAG_DIRECTIVE_S_STRUCT_API
	 	local
	 		l_ptr: POINTER
	 	do
			l_ptr := c_document_start_tag_directives_end (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
	 	end

	 document_start_implicit: INTEGER
		do
			Result := c_document_start_implicit (item)
		end

	 document_end_implicit: INTEGER
		do
			Result := c_document_end_implicit (item)
		end

feature -- Yaml scalar parameters

	scalar_anchor: detachable STRING
			-- The anchor.
		local
			l_ptr: POINTER
		do
			l_ptr := c_scalar_anchor (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	scalar_tag: detachable STRING
			-- The tag.
		local
			l_ptr: POINTER
		do
			l_ptr := c_scalar_tag (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	scalar_value: detachable STRING
			-- The value.
		local
			l_ptr: POINTER
		do
			l_ptr := c_scalar_value (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	scalar_length: INTEGER
			-- The length of the scalar value.
		do
			Result := c_scalar_length (item)
		end

	scalar_plain_implicit: INTEGER
			--Is the tag optional for the plain style?.
		do
				-- TODO check if we can use BOOLEAN and EIF_BOOLEAN.
			Result := c_scalar_plain_implicit (item)
		end

	scalar_quoted_implicit: INTEGER
			--Is the tag optional for any non-plain style?
		do
				-- TODO check if we can use BOOLEAN and EIF_BOOLEAN.
			Result := c_scalar_quoted_implicit (item)
		end

	scalar_style: INTEGER
			--The scalar style.
		do
			Result := c_scalar_style (item)
		end


feature -- Yaml sequence parameters

	sequence_start_anchor: detachable STRING
			-- The anchor.
		local
			l_ptr: POINTER
		do
			l_ptr := c_sequence_start_anchor (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end


	sequence_start_tag: detachable STRING
			-- The tag.
		local
			l_ptr: POINTER
		do
			l_ptr := c_sequence_start_tag (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	sequence_start_implicit: INTEGER
			--Is the tag optional?
		do
				-- TODO check if we can user BOOLEAN and EIF_BOOLEAN.
			Result := c_sequence_start_implicit (item)
		end

	sequence_start_style: INTEGER
			--The sequence style.
		do
			Result := c_sequence_start_style (item)
		end

feature -- Yaml mapping parameters

	mapping_start_anchor: detachable STRING
			-- The anchor.
		local
			l_ptr: POINTER
		do
			l_ptr := c_mapping_start_anchor (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	mapping_start_tag: detachable STRING
			-- The tag.
		local
			l_ptr: POINTER
		do
			l_ptr := c_mapping_start_tag (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end

	mapping_start_implicit: INTEGER
			--Is the tag optional?
		do
				-- TODO check if we can user BOOLEAN and EIF_BOOLEAN.
			Result := c_mapping_start_implicit (item)
		end

	mapping_start_style: INTEGER
			--The mapping style.
		do
			Result := c_mapping_start_style (item)
		end

feature -- alias parameters

	alias_anchor: detachable STRING
			-- The anchor.
		local
			l_ptr: POINTER
		do
			l_ptr := c_alias_anchor (item)
			if l_ptr /= default_pointer then
				create Result.make_from_c (l_ptr)
			end
		end



feature {NONE} -- Implementation wrapper for struct struct yaml_event_s

	sizeof_external: INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_event_s)"
		end

	c_stream_start_encoding (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.stream_start.encoding
			]"
		end

	c_document_start_version_directive (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.document_start.version_directive
			]"
		end

	c_document_start_tag_directives_start (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.document_start.tag_directives.start
			]"
		end

	c_document_start_tag_directives_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.document_start.tag_directives.end
			]"
		end

	c_document_start_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.document_start.implicit
			]"
		end

	c_document_end_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.document_end.implicit
			]"
		end

	c_scalar_anchor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.anchor
			]"
		end

	c_scalar_tag (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.tag
			]"
		end

	c_scalar_value (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.value
			]"
		end

	c_scalar_length (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.length
			]"
		end

	c_scalar_plain_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.plain_implicit
			]"
		end

	c_scalar_quoted_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.quoted_implicit
			]"
		end

	c_scalar_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.scalar.style
			]"
		end

	c_sequence_start_anchor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.sequence_start.anchor
			]"
		end

	c_sequence_start_tag (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.sequence_start.tag
			]"
		end

	c_sequence_start_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.sequence_start.implicit
			]"
		end

	c_sequence_start_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.sequence_start.style
			]"
		end



	c_mapping_start_style (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.mapping_start.style
			]"
		end

	c_mapping_start_anchor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.mapping_start.anchor
			]"
		end

	c_mapping_start_tag (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.mapping_start.tag
			]"
		end

	c_mapping_start_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.mapping_start.implicit
			]"
		end

	c_alias_anchor (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->data.alias.anchor
			]"
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->type =  (yaml_event_type_t)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_start_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_event_s*)$an_item)->start_mark
			]"
		end

	set_c_start_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->start_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_end_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_event_s*)$an_item)->end_mark
			]"
		end

	set_c_end_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_event_s*)$an_item)->end_mark =  *(yaml_mark_t*)$a_value
			]"
		end

end
