note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class YAML_DOCUMENT_S_STRUCT_API

inherit

	MEMORY_STRUCTURE


create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version_directive: detachable YAML_VERSION_DIRECTIVE_S_STRUCT_API
			-- Access member `version_directive`
		require
			exists: exists
		do
			if attached c_version_directive (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_version_directive (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.item = c_version_directive (item)
		end

	set_version_directive (a_value: YAML_VERSION_DIRECTIVE_S_STRUCT_API)
			-- Set member `version_directive`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_version_directive (item, a_value.item)
		ensure
			version_directive_set: attached version_directive as l_value implies l_value.item = a_value.item
		end

	start_implicit: INTEGER
			-- Access member `start_implicit`
		require
			exists: exists
		do
			Result := c_start_implicit (item)
		ensure
			result_correct: Result = c_start_implicit (item)
		end

	set_start_implicit (a_value: INTEGER)
			-- Change the value of member `start_implicit` to `a_value`.
		require
			exists: exists
		do
			set_c_start_implicit (item, a_value)
		ensure
			start_implicit_set: a_value = start_implicit
		end

	end_implicit: INTEGER
			-- Access member `end_implicit`
		require
			exists: exists
		do
			Result := c_end_implicit (item)
		ensure
			result_correct: Result = c_end_implicit (item)
		end

	set_end_implicit (a_value: INTEGER)
			-- Change the value of member `end_implicit` to `a_value`.
		require
			exists: exists
		do
			set_c_end_implicit (item, a_value)
		ensure
			end_implicit_set: a_value = end_implicit
		end

	start_mark: YAML_MARK_S_STRUCT_API
			-- Access member `start_mark`
		require
			exists: exists
		do
			create Result.make_by_pointer (c_start_mark (item))
		end

	set_start_mark (a_value: POINTER )
			-- Set member `start_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_start_mark (item, a_value)
		ensure
			start_mark_set: start_mark = a_value
		end

	end_mark: YAML_MARK_S_STRUCT_API
			-- Access member `end_mark`
		require
			exists: exists
		do
			create Result.make_by_pointer (c_end_mark (item))
		end

	set_end_mark (a_value: POINTER )
			-- Set member `end_mark`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_end_mark (item, a_value)
		ensure
			end_mark_set: end_mark = a_value
		end

--feature -- Document: Nodes

--	nodes_start: detachable YAML_NODE_S_STRUCT_API
--			-- The beginning of the stack
--		local
--			l_ptr: POINTER
--		do
--			l_ptr := c_nodes_start (item)
--			if l_ptr /= default_pointer then
--				create Result.make_by_pointer (item)
--			end
--		end

--	nodes_end: detachable YAML_NODE_S_STRUCT_API
--			-- The end of the stack
--		local
--			l_ptr: POINTER
--		do
--			l_ptr := c_nodes_end (item)
--			if l_ptr /= default_pointer then
--				create Result.make_by_pointer (item)
--			end
--		end

--	nodes_top: detachable YAML_NODE_S_STRUCT_API
--			-- The top of the stack
--		local
--			l_ptr: POINTER
--		do
--			l_ptr := c_nodes_top (item)
--			if l_ptr /= default_pointer then
--				create Result.make_by_pointer (item)
--			end
--		end


feature -- List of tag directives

	tag_directives_start: detachable YAML_TAG_DIRECTIVE_S_STRUCT_API
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_directives_start (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end

	tag_directives_end: detachable YAML_TAG_DIRECTIVE_S_STRUCT_API
		local
			l_ptr: POINTER
		do
			l_ptr := c_tag_directives_end (item)
			if l_ptr /= default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		end


feature {NONE} -- Implementation wrapper for struct struct yaml_document_s

	sizeof_external: INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"sizeof(struct yaml_document_s)"
		end

	c_version_directive (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->version_directive
			]"
		end

	set_c_version_directive (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->version_directive =  (yaml_version_directive_t*)$a_value
			]"
		ensure
			version_directive_set: a_value = c_version_directive (an_item)
		end

	c_start_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->start_implicit
			]"
		end

	set_c_start_implicit (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->start_implicit =  (int)$a_value
			]"
		ensure
			start_implicit_set: a_value = c_start_implicit (an_item)
		end

	c_end_implicit (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->end_implicit
			]"
		end

	set_c_end_implicit (an_item: POINTER; a_value: INTEGER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->end_implicit =  (int)$a_value
			]"
		ensure
			end_implicit_set: a_value = c_end_implicit (an_item)
		end

	c_start_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_document_s*)$an_item)->start_mark
			]"
		end

	set_c_start_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->start_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_end_mark (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				&((struct yaml_document_s*)$an_item)->end_mark
			]"
		end

	set_c_end_mark (an_item: POINTER; a_value: POINTER)
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->end_mark =  *(yaml_mark_t*)$a_value
			]"
		end

	c_nodes_start (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->nodes.start
			]"
		end

	c_nodes_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->nodes.end
			]"
		end

	c_nodes_top (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->nodes.top
			]"
		end

	c_tag_directives_start (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->tag_directives.start
			]"
		end

	c_tag_directives_end (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <yaml.h>"
		alias
			"[
				((struct yaml_document_s*)$an_item)->tag_directives.end
			]"
		end
end
