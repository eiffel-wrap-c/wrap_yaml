note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class YAML_FUNCTIONS_API


feature -- Access

	yaml_get_version_string: POINTER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_get_version_string ();
			]"
		end

	yaml_get_version (major: POINTER; minor: POINTER; patch: POINTER)
		do
			c_yaml_get_version (major, minor, patch)
		ensure
			instance_free: class
		end

	yaml_token_delete (token: YAML_TOKEN_S_STRUCT_API)
		do
			c_yaml_token_delete (token.item)
		ensure
			instance_free: class
		end

	yaml_stream_start_event_initialize (event: YAML_EVENT_S_STRUCT_API; encoding: INTEGER): INTEGER
		do
			Result := c_yaml_stream_start_event_initialize (event.item, encoding)
		ensure
			instance_free: class
		end

	yaml_stream_end_event_initialize (event: YAML_EVENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_stream_end_event_initialize (event.item)
		ensure
			instance_free: class
		end

	yaml_document_start_event_initialize (event: YAML_EVENT_S_STRUCT_API; version_directive: YAML_VERSION_DIRECTIVE_S_STRUCT_API; tag_directives_start: YAML_TAG_DIRECTIVE_S_STRUCT_API; tag_directives_end: YAML_TAG_DIRECTIVE_S_STRUCT_API; implicit: INTEGER): INTEGER
		do
			Result := c_yaml_document_start_event_initialize (event.item, version_directive.item, tag_directives_start.item, tag_directives_end.item, implicit)
		ensure
			instance_free: class
		end

	yaml_document_end_event_initialize (event: YAML_EVENT_S_STRUCT_API; implicit: INTEGER): INTEGER
		do
			Result := c_yaml_document_end_event_initialize (event.item, implicit)
		ensure
			instance_free: class
		end

	yaml_alias_event_initialize (event: YAML_EVENT_S_STRUCT_API; anchor: STRING): INTEGER
		local
			anchor_c_string: C_STRING
		do
			create anchor_c_string.make (anchor)
			Result := c_yaml_alias_event_initialize (event.item, anchor_c_string.item)
		ensure
			instance_free: class
		end

	yaml_scalar_event_initialize (event: YAML_EVENT_S_STRUCT_API; anchor: STRING; tag: STRING; value: STRING; length: INTEGER; plain_implicit: INTEGER; quoted_implicit: INTEGER; style: INTEGER): INTEGER
		local
			anchor_c_string: C_STRING
			tag_c_string: C_STRING
			value_c_string: C_STRING
		do
			create anchor_c_string.make (anchor)
			create tag_c_string.make (tag)
			create value_c_string.make (value)
			Result := c_yaml_scalar_event_initialize (event.item, anchor_c_string.item, tag_c_string.item, value_c_string.item, length, plain_implicit, quoted_implicit, style)
		ensure
			instance_free: class
		end

	yaml_sequence_start_event_initialize (event: YAML_EVENT_S_STRUCT_API; anchor: STRING; tag: STRING; implicit: INTEGER; style: INTEGER): INTEGER
		local
			anchor_c_string: C_STRING
			tag_c_string: C_STRING
		do
			create anchor_c_string.make (anchor)
			create tag_c_string.make (tag)
			Result := c_yaml_sequence_start_event_initialize (event.item, anchor_c_string.item, tag_c_string.item, implicit, style)
		ensure
			instance_free: class
		end

	yaml_sequence_end_event_initialize (event: YAML_EVENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_sequence_end_event_initialize (event.item)
		ensure
			instance_free: class
		end

	yaml_mapping_start_event_initialize (event: YAML_EVENT_S_STRUCT_API; anchor: STRING; tag: STRING; implicit: INTEGER; style: INTEGER): INTEGER
		local
			anchor_c_string: C_STRING
			tag_c_string: C_STRING
		do
			create anchor_c_string.make (anchor)
			create tag_c_string.make (tag)
			Result := c_yaml_mapping_start_event_initialize (event.item, anchor_c_string.item, tag_c_string.item, implicit, style)
		ensure
			instance_free: class
		end

	yaml_mapping_end_event_initialize (event: YAML_EVENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_mapping_end_event_initialize (event.item)
		ensure
			instance_free: class
		end

	yaml_event_delete (event: YAML_EVENT_S_STRUCT_API)
		do
			c_yaml_event_delete (event.item)
		ensure
			instance_free: class
		end

	yaml_document_initialize (document: YAML_DOCUMENT_S_STRUCT_API; version_directive: YAML_VERSION_DIRECTIVE_S_STRUCT_API; tag_directives_start: YAML_TAG_DIRECTIVE_S_STRUCT_API; tag_directives_end: YAML_TAG_DIRECTIVE_S_STRUCT_API; start_implicit: INTEGER; end_implicit: INTEGER): INTEGER
		do
			Result := c_yaml_document_initialize (document.item, version_directive.item, tag_directives_start.item, tag_directives_end.item, start_implicit, end_implicit)
		ensure
			instance_free: class
		end

	yaml_document_delete (document: YAML_DOCUMENT_S_STRUCT_API)
		do
			c_yaml_document_delete (document.item)
		ensure
			instance_free: class
		end

	yaml_document_get_node (document: YAML_DOCUMENT_S_STRUCT_API; index: INTEGER): detachable YAML_NODE_S_STRUCT_API
		do
			if attached c_yaml_document_get_node (document.item, index) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instance_free: class
		end

	yaml_document_get_root_node (document: YAML_DOCUMENT_S_STRUCT_API): detachable YAML_NODE_S_STRUCT_API
		do
			if attached c_yaml_document_get_root_node (document.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end
		ensure
			instance_free: class
		end

	yaml_document_add_scalar (document: YAML_DOCUMENT_S_STRUCT_API; tag: STRING; value: STRING; length: INTEGER; style: INTEGER): INTEGER
		local
			tag_c_string: C_STRING
			value_c_string: C_STRING
		do
			create tag_c_string.make (tag)
			create value_c_string.make (value)
			Result := c_yaml_document_add_scalar (document.item, tag_c_string.item, value_c_string.item, length, style)
		ensure
			instance_free: class
		end

	yaml_document_add_sequence (document: YAML_DOCUMENT_S_STRUCT_API; tag: STRING; style: INTEGER): INTEGER
		local
			tag_c_string: C_STRING
		do
			create tag_c_string.make (tag)
			Result := c_yaml_document_add_sequence (document.item, tag_c_string.item, style)
		ensure
			instance_free: class
		end

	yaml_document_add_mapping (document: YAML_DOCUMENT_S_STRUCT_API; tag: STRING; style: INTEGER): INTEGER
		local
			tag_c_string: C_STRING
		do
			create tag_c_string.make (tag)
			Result := c_yaml_document_add_mapping (document.item, tag_c_string.item, style)
		ensure
			instance_free: class
		end

	yaml_document_append_sequence_item (document: YAML_DOCUMENT_S_STRUCT_API; sequence: INTEGER; item: INTEGER): INTEGER
		do
			Result := c_yaml_document_append_sequence_item (document.item, sequence, item)
		ensure
			instance_free: class
		end

	yaml_document_append_mapping_pair (document: YAML_DOCUMENT_S_STRUCT_API; mapping: INTEGER; key: INTEGER; value: INTEGER): INTEGER
		do
			Result := c_yaml_document_append_mapping_pair (document.item, mapping, key, value)
		ensure
			instance_free: class
		end

	yaml_parser_initialize (parser: YAML_PARSER_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_parser_initialize (parser.item)
		ensure
			instance_free: class
		end

	yaml_parser_delete (parser: YAML_PARSER_S_STRUCT_API)
		do
			c_yaml_parser_delete (parser.item)
		ensure
			instance_free: class
		end

	yaml_parser_set_input_string (parser: YAML_PARSER_S_STRUCT_API; input: STRING; size: INTEGER)
		local
			input_c_string: C_STRING
		do
			create input_c_string.make (input)
			c_yaml_parser_set_input_string (parser.item, input_c_string.item, size)
		ensure
			instance_free: class
		end

	yaml_parser_set_input (parser: YAML_PARSER_S_STRUCT_API; handler: POINTER; data: POINTER)
		do
			c_yaml_parser_set_input (parser.item, handler, data)
		ensure
			instance_free: class
		end

	yaml_parser_set_encoding (parser: YAML_PARSER_S_STRUCT_API; encoding: INTEGER)
		do
			c_yaml_parser_set_encoding (parser.item, encoding)
		ensure
			instance_free: class
		end

	yaml_parser_scan (parser: YAML_PARSER_S_STRUCT_API; token: YAML_TOKEN_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_parser_scan (parser.item, token.item)
		ensure
			instance_free: class
		end

	yaml_parser_parse (parser: YAML_PARSER_S_STRUCT_API; event: YAML_EVENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_parser_parse (parser.item, event.item)
		ensure
			instance_free: class
		end

	yaml_parser_load (parser: YAML_PARSER_S_STRUCT_API; document: YAML_DOCUMENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_parser_load (parser.item, document.item)
		ensure
			instance_free: class
		end

	yaml_emitter_initialize (emitter: YAML_EMITTER_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_initialize (emitter.item)
		ensure
			instance_free: class
		end

	yaml_emitter_delete (emitter: YAML_EMITTER_S_STRUCT_API)
		do
			c_yaml_emitter_delete (emitter.item)
		ensure
			instance_free: class
		end

	yaml_emitter_set_output_string (emitter: YAML_EMITTER_S_STRUCT_API; output: STRING; size: INTEGER; size_written: POINTER)
		local
			output_c_string: C_STRING
		do
			create output_c_string.make (output)
			c_yaml_emitter_set_output_string (emitter.item, output_c_string.item, size, size_written)
		ensure
			instance_free: class
		end

	yaml_emitter_set_output (emitter: YAML_EMITTER_S_STRUCT_API; handler: POINTER; data: POINTER)
		do
			c_yaml_emitter_set_output (emitter.item, handler, data)
		ensure
			instance_free: class
		end

	yaml_emitter_set_encoding (emitter: YAML_EMITTER_S_STRUCT_API; encoding: INTEGER)
		do
			c_yaml_emitter_set_encoding (emitter.item, encoding)
		ensure
			instance_free: class
		end

	yaml_emitter_set_canonical (emitter: YAML_EMITTER_S_STRUCT_API; canonical: INTEGER)
		do
			c_yaml_emitter_set_canonical (emitter.item, canonical)
		ensure
			instance_free: class
		end

	yaml_emitter_set_indent (emitter: YAML_EMITTER_S_STRUCT_API; indent: INTEGER)
		do
			c_yaml_emitter_set_indent (emitter.item, indent)
		ensure
			instance_free: class
		end

	yaml_emitter_set_width (emitter: YAML_EMITTER_S_STRUCT_API; width: INTEGER)
		do
			c_yaml_emitter_set_width (emitter.item, width)
		ensure
			instance_free: class
		end

	yaml_emitter_set_unicode (emitter: YAML_EMITTER_S_STRUCT_API; unicode: INTEGER)
		do
			c_yaml_emitter_set_unicode (emitter.item, unicode)
		ensure
			instance_free: class
		end

	yaml_emitter_set_break (emitter: YAML_EMITTER_S_STRUCT_API; line_break: INTEGER)
		do
			c_yaml_emitter_set_break (emitter.item, line_break)
		ensure
			instance_free: class
		end

	yaml_emitter_emit (emitter: YAML_EMITTER_S_STRUCT_API; event: YAML_EVENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_emit (emitter.item, event.item)
		ensure
			instance_free: class
		end

	yaml_emitter_open (emitter: YAML_EMITTER_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_open (emitter.item)
		ensure
			instance_free: class
		end

	yaml_emitter_close (emitter: YAML_EMITTER_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_close (emitter.item)
		ensure
			instance_free: class
		end

	yaml_emitter_dump (emitter: YAML_EMITTER_S_STRUCT_API; document: YAML_DOCUMENT_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_dump (emitter.item, document.item)
		ensure
			instance_free: class
		end

	yaml_emitter_flush (emitter: YAML_EMITTER_S_STRUCT_API): INTEGER
		do
			Result := c_yaml_emitter_flush (emitter.item)
		ensure
			instance_free: class
		end

feature -- Externals

	c_yaml_get_version (major: POINTER; minor: POINTER; patch: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_get_version ((int*)$major, (int*)$minor, (int*)$patch);
			]"
		end

	c_yaml_token_delete (token: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_token_delete ((yaml_token_t*)$token);
			]"
		end

	c_yaml_stream_start_event_initialize (event: POINTER; encoding: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_stream_start_event_initialize ((yaml_event_t*)$event, (yaml_encoding_t)$encoding);
			]"
		end

	c_yaml_stream_end_event_initialize (event: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_stream_end_event_initialize ((yaml_event_t*)$event);
			]"
		end

	c_yaml_document_start_event_initialize (event: POINTER; version_directive: POINTER; tag_directives_start: POINTER; tag_directives_end: POINTER; implicit: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_start_event_initialize ((yaml_event_t*)$event, (yaml_version_directive_t*)$version_directive, (yaml_tag_directive_t*)$tag_directives_start, (yaml_tag_directive_t*)$tag_directives_end, (int)$implicit);
			]"
		end

	c_yaml_document_end_event_initialize (event: POINTER; implicit: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_end_event_initialize ((yaml_event_t*)$event, (int)$implicit);
			]"
		end

	c_yaml_alias_event_initialize (event: POINTER; anchor: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_alias_event_initialize ((yaml_event_t*)$event, (yaml_char_t*)$anchor);
			]"
		end

	c_yaml_scalar_event_initialize (event: POINTER; anchor: POINTER; tag: POINTER; value: POINTER; length: INTEGER; plain_implicit: INTEGER; quoted_implicit: INTEGER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_scalar_event_initialize ((yaml_event_t*)$event, (yaml_char_t*)$anchor, (yaml_char_t*)$tag, (yaml_char_t*)$value, (int)$length, (int)$plain_implicit, (int)$quoted_implicit, (yaml_scalar_style_t)$style);
			]"
		end

	c_yaml_sequence_start_event_initialize (event: POINTER; anchor: POINTER; tag: POINTER; implicit: INTEGER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_sequence_start_event_initialize ((yaml_event_t*)$event, (yaml_char_t*)$anchor, (yaml_char_t*)$tag, (int)$implicit, (yaml_sequence_style_t)$style);
			]"
		end

	c_yaml_sequence_end_event_initialize (event: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_sequence_end_event_initialize ((yaml_event_t*)$event);
			]"
		end

	c_yaml_mapping_start_event_initialize (event: POINTER; anchor: POINTER; tag: POINTER; implicit: INTEGER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_mapping_start_event_initialize ((yaml_event_t*)$event, (yaml_char_t*)$anchor, (yaml_char_t*)$tag, (int)$implicit, (yaml_mapping_style_t)$style);
			]"
		end

	c_yaml_mapping_end_event_initialize (event: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_mapping_end_event_initialize ((yaml_event_t*)$event);
			]"
		end

	c_yaml_event_delete (event: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_event_delete ((yaml_event_t*)$event);
			]"
		end

	c_yaml_document_initialize (document: POINTER; version_directive: POINTER; tag_directives_start: POINTER; tag_directives_end: POINTER; start_implicit: INTEGER; end_implicit: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_initialize ((yaml_document_t*)$document, (yaml_version_directive_t*)$version_directive, (yaml_tag_directive_t*)$tag_directives_start, (yaml_tag_directive_t*)$tag_directives_end, (int)$start_implicit, (int)$end_implicit);
			]"
		end

	c_yaml_document_delete (document: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_document_delete ((yaml_document_t*)$document);
			]"
		end

	c_yaml_document_get_node (document: POINTER; index: INTEGER): POINTER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_get_node ((yaml_document_t*)$document, (int)$index);
			]"
		end

	c_yaml_document_get_root_node (document: POINTER): POINTER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_get_root_node ((yaml_document_t*)$document);
			]"
		end

	c_yaml_document_add_scalar (document: POINTER; tag: POINTER; value: POINTER; length: INTEGER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_add_scalar ((yaml_document_t*)$document, (yaml_char_t*)$tag, (yaml_char_t*)$value, (int)$length, (yaml_scalar_style_t)$style);
			]"
		end

	c_yaml_document_add_sequence (document: POINTER; tag: POINTER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_add_sequence ((yaml_document_t*)$document, (yaml_char_t*)$tag, (yaml_sequence_style_t)$style);
			]"
		end

	c_yaml_document_add_mapping (document: POINTER; tag: POINTER; style: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_add_mapping ((yaml_document_t*)$document, (yaml_char_t*)$tag, (yaml_mapping_style_t)$style);
			]"
		end

	c_yaml_document_append_sequence_item (document: POINTER; sequence: INTEGER; item: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_append_sequence_item ((yaml_document_t*)$document, (int)$sequence, (int)$item);
			]"
		end

	c_yaml_document_append_mapping_pair (document: POINTER; mapping: INTEGER; key: INTEGER; value: INTEGER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_document_append_mapping_pair ((yaml_document_t*)$document, (int)$mapping, (int)$key, (int)$value);
			]"
		end

	c_yaml_parser_initialize (parser: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_parser_initialize ((yaml_parser_t*)$parser);
			]"
		end

	c_yaml_parser_delete (parser: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_parser_delete ((yaml_parser_t*)$parser);
			]"
		end

	c_yaml_parser_set_input_string (parser: POINTER; input: POINTER; size: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_parser_set_input_string ((yaml_parser_t*)$parser, (unsigned char const*)$input, (size_t)$size);
			]"
		end

	c_yaml_parser_set_input_file (parser: POINTER; file: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_parser_set_input_file ((yaml_parser_t*)$parser, (FILE*)$file);
			]"
		end

	c_yaml_parser_set_input (parser: POINTER; handler: POINTER; data: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_parser_set_input ((yaml_parser_t*)$parser, (yaml_read_handler_t*)$handler, (void*)$data);
			]"
		end

	c_yaml_parser_set_encoding (parser: POINTER; encoding: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_parser_set_encoding ((yaml_parser_t*)$parser, (yaml_encoding_t)$encoding);
			]"
		end

	c_yaml_parser_scan (parser: POINTER; token: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_parser_scan ((yaml_parser_t*)$parser, (yaml_token_t*)$token);
			]"
		end

	c_yaml_parser_parse (parser: POINTER; event: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_parser_parse ((yaml_parser_t*)$parser, (yaml_event_t*)$event);
			]"
		end

	c_yaml_parser_load (parser: POINTER; document: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_parser_load ((yaml_parser_t*)$parser, (yaml_document_t*)$document);
			]"
		end

	c_yaml_emitter_initialize (emitter: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_initialize ((yaml_emitter_t*)$emitter);
			]"
		end

	c_yaml_emitter_delete (emitter: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_delete ((yaml_emitter_t*)$emitter);
			]"
		end

	c_yaml_emitter_set_output_string (emitter: POINTER; output: POINTER; size: INTEGER; size_written: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_output_string ((yaml_emitter_t*)$emitter, (unsigned char*)$output, (size_t)$size, (size_t*)$size_written);
			]"
		end

	c_yaml_emitter_set_output_file (emitter: POINTER; file: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_output_file ((yaml_emitter_t*)$emitter, (FILE*)$file);
			]"
		end

	c_yaml_emitter_set_output (emitter: POINTER; handler: POINTER; data: POINTER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_output ((yaml_emitter_t*)$emitter, (yaml_write_handler_t*)$handler, (void*)$data);
			]"
		end

	c_yaml_emitter_set_encoding (emitter: POINTER; encoding: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_encoding ((yaml_emitter_t*)$emitter, (yaml_encoding_t)$encoding);
			]"
		end

	c_yaml_emitter_set_canonical (emitter: POINTER; canonical: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_canonical ((yaml_emitter_t*)$emitter, (int)$canonical);
			]"
		end

	c_yaml_emitter_set_indent (emitter: POINTER; indent: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_indent ((yaml_emitter_t*)$emitter, (int)$indent);
			]"
		end

	c_yaml_emitter_set_width (emitter: POINTER; width: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_width ((yaml_emitter_t*)$emitter, (int)$width);
			]"
		end

	c_yaml_emitter_set_unicode (emitter: POINTER; unicode: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_unicode ((yaml_emitter_t*)$emitter, (int)$unicode);
			]"
		end

	c_yaml_emitter_set_break (emitter: POINTER; line_break: INTEGER)
		external
			"C inline use <yaml.h>"
		alias
			"[
				yaml_emitter_set_break ((yaml_emitter_t*)$emitter, (yaml_break_t)$line_break);
			]"
		end

	c_yaml_emitter_emit (emitter: POINTER; event: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_emit ((yaml_emitter_t*)$emitter, (yaml_event_t*)$event);
			]"
		end

	c_yaml_emitter_open (emitter: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_open ((yaml_emitter_t*)$emitter);
			]"
		end

	c_yaml_emitter_close (emitter: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_close ((yaml_emitter_t*)$emitter);
			]"
		end

	c_yaml_emitter_dump (emitter: POINTER; document: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_dump ((yaml_emitter_t*)$emitter, (yaml_document_t*)$document);
			]"
		end

	c_yaml_emitter_flush (emitter: POINTER): INTEGER
		external
			"C inline use <yaml.h>"
		alias
			"[
				return yaml_emitter_flush ((yaml_emitter_t*)$emitter);
			]"
		end

end
